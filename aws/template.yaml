AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: dev

Resources:
  # DynamoDB Tables
  MissionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub missions-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  MissionDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub mission-data-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: missionId
          AttributeType: S
        - AttributeName: tabIndex
          AttributeType: S
      KeySchema:
        - AttributeName: missionId
          KeyType: HASH
        - AttributeName: tabIndex
          KeyType: RANGE

  # Lambda Functions
  MissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: missions.handler
      Runtime: nodejs18.x
      Timeout: 30
      Environment:
        Variables:
          MISSIONS_TABLE: !Ref MissionsTable
          MISSION_DATA_TABLE: !Ref MissionDataTable
          AGENT_RUNTIME_ARN: !Sub "arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/phase0_agent-kpLtDhGVlC"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MissionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MissionDataTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock-agentcore:InvokeAgentRuntime
              Resource: 
                - !Sub "arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/phase0_agent-kpLtDhGVlC"
                - !Sub "arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/phase0_agent-kpLtDhGVlC/*"

      Events:
        GetMissions:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions
            Method: get
        CreateMission:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions
            Method: post
        GetMission:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions/{id}
            Method: get
        DeleteMission:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions/{id}
            Method: delete
        GetTabData:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions/{id}/tabs/{tabIndex}
            Method: get
        SaveTabData:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions/{id}/tabs/{tabIndex}
            Method: put
        UpdateMission:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions/{id}
            Method: put
        ChatWithAgent:
          Type: Api
          Properties:
            RestApiId: !Ref MissionApi
            Path: /missions/{id}/chat
            Method: post


  # API Gateway
  MissionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: false

  # S3 Bucket for UI hosting
  UIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub mission-admin-ui-${Environment}-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for public read access
  UIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UIBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${UIBucket.Arn}/*"

  # CloudFront Distribution
  UIDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt UIBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${MissionApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  UIBucketName:
    Description: S3 bucket name for UI hosting
    Value: !Ref UIBucket
    Export:
      Name: !Sub "${AWS::StackName}-UIBucket"
  
  UIUrl:
    Description: CloudFront distribution URL for UI
    Value: !Sub "https://${UIDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-UIUrl"