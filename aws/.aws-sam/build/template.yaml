AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Environment:
    Type: String
    Default: dev
  ALBCertificateArn:
    Type: String
    Description: ACM Certificate ARN for ALB HTTPS (must be in same region as ALB)
    Default: arn:aws:acm:eu-central-1:886732474028:certificate/e686e7ed-2cc3-486c-8d75-d43c2c1b4b1d
  CloudFrontCertificateArn:
    Type: String
    Description: ACM Certificate ARN for CloudFront (must be in us-east-1)
    Default: arn:aws:acm:us-east-1:886732474028:certificate/b0107722-3482-4a42-96bd-81e8674a3587
  APIDomainName:
    Type: String
    Description: Domain name for API endpoint
    Default: api.phase0.gauravlanjekar.in
  UIDomainName:
    Type: String
    Description: Domain name for UI
    Default: phase0.gauravlanjekar.in
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for gauravlanjekar.in
    Default: Z04795961AQ19J9NPWJPX
Conditions:
  HasHostedZone:
    Fn::Not:
    - Fn::Equals:
      - Ref: HostedZoneId
      - ''
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: mission-admin-${Environment}
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
      - Name: email
        AttributeDataType: String
        Required: true
        Mutable: true
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName:
        Fn::Sub: mission-admin-client-${Environment}
      GenerateSecret: false
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - Fn::If:
        - HasHostedZone
        - Fn::Sub: https://${UIDomainName}
        - http://localhost:3000
      LogoutURLs:
      - Fn::If:
        - HasHostedZone
        - Fn::Sub: https://${UIDomainName}/login
        - http://localhost:3000/login
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId:
        Ref: UserPool
      Domain:
        Fn::Sub: mission-admin-${Environment}-${AWS::AccountId}
  AgentApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name:
        Fn::Sub: mission-admin-agent-key-${Environment}
      Description: API Key for agent tool access
      Enabled: true
      Value:
        Fn::Sub: agent-${AWS::AccountId}-${Environment}-key-2024
  MissionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: missions-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
  MissionDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: mission-data-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: missionId
        AttributeType: S
      - AttributeName: tabIndex
        AttributeType: S
      KeySchema:
      - AttributeName: missionId
        KeyType: HASH
      - AttributeName: tabIndex
        KeyType: RANGE
  MissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MissionFunction
      Handler: missions.handler
      Runtime: nodejs18.x
      Timeout: 900
      Environment:
        Variables:
          MISSIONS_TABLE:
            Ref: MissionsTable
          MISSION_DATA_TABLE:
            Ref: MissionDataTable
          AGENT_RUNTIME_ARN:
            Fn::Sub: arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/phase0_agent-kpLtDhGVlC
          USER_POOL_ID:
            Ref: UserPool
          AGENT_API_KEY:
            Ref: AgentApiKey
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MissionsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MissionDataTable
      - Statement:
        - Effect: Allow
          Action:
          - bedrock-agentcore:InvokeAgentRuntime
          Resource:
          - Fn::Sub: arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/phase0_agent-kpLtDhGVlC
          - Fn::Sub: arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/phase0_agent-kpLtDhGVlC/*
        - Effect: Allow
          Action:
          - cognito-idp:GetUser
          - cognito-idp:AdminGetUser
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
    Metadata:
      SamResourceId: MissionFunction
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
  MissionTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
      - Id:
          Fn::GetAtt:
          - MissionFunction
          - Arn
  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: 443
          StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: MissionTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: arn:aws:acm:eu-central-1:886732474028:certificate/e686e7ed-2cc3-486c-8d75-d43c2c1b4b1d
  MissionFunctionALBPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: MissionFunction
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
  APIRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasHostedZone
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: APIDomainName
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - ApplicationLoadBalancer
          - CanonicalHostedZoneID
  UIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: mission-admin-ui-${Environment}-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  UIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: UIBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${UIBucket.Arn}/*
  UIRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasHostedZone
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: UIDomainName
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - UIDistribution
          - DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  UIDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - Ref: UIDomainName
        ViewerCertificate:
          AcmCertificateArn:
            Ref: CloudFrontCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
        - DomainName:
            Fn::GetAtt:
            - UIBucket
            - RegionalDomainName
          Id: S3Origin
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        PriceClass: PriceClass_100
Outputs:
  ApiUrl:
    Description: API endpoint URL
    Value:
      Fn::If:
      - HasHostedZone
      - Fn::Sub: https://${APIDomainName}
      - Fn::Sub: https://${ApplicationLoadBalancer.DNSName}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiUrl
  UIBucketName:
    Description: S3 bucket name for UI hosting
    Value:
      Ref: UIBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UIBucket
  UIUrl:
    Description: UI URL
    Value:
      Fn::If:
      - HasHostedZone
      - Fn::Sub: https://${UIDomainName}
      - Fn::Sub: https://${UIDistribution.DomainName}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UIUrl
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolId
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: UserPoolClient
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolClientId
  CognitoDomain:
    Description: Cognito Hosted UI Domain
    Value:
      Fn::Sub: ${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CognitoDomain
  AgentApiKey:
    Description: API Key for Agent Access
    Value:
      Ref: AgentApiKey
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AgentApiKey
